  14 //*************************************************************************************//
  15 //                                  전역변수 선언                                      //
  16 //*************************************************************************************//
  17 
  18 // 기본 자료형을 저장해 두는 배열
  19 #define SIZE 8  // 배열의 크기
  20 char type[SIZE][30] = {"int[]", "int", "float", "double", "char[]", "char", "File ", "FileWriter "};
  21 
  22 // 기본 자료형에 따라 형태를 저장해 두는 배열
  23 char type_d[SIZE][20] = {"", "\"%d\"", "\"%f\"", "\"%lf\"", "\"%s\"", "\"%c\"", "FILE *", ""};
  24 
  25 // 소스파일에 쓰인 변수와 자료형을 보관하는 구조체
  26 typedef struct VAR_STORE {
  27         char types[20];
  28         char var[100];
  29 } var_store;
  30 
  31 // main함수, 인자로 filename과 option을 받는다.
  32 int main(int argc, char *argv[]) {
  33 
  34         //***********************************************************************************//
  35         //                           main 함수 안에서의 지역변수 선언                        //
  36         //***********************************************************************************//
  37 
  38         // 옵션인자 플래그 지정
  39         int j_flag = 0;
  40         int c_flag = 0;
  41         int p_flag = 0;
  42         int f_flag = 0;
  43         int l_flag = 0;
  44         int r_flag = 0;
  45 
  46         // 각 옵션인자에 필요한 배열과 정수형 변수 지정
  47         char p_buffer[1024][1024];
  48         int p_count = 0;
  49 
  50         // 변환하고자 하는 java 소스 파일 디스크립터
  51         int fd_file;
  52 
  53         // 변환한 파일명 저장 - main함수 전용
  54         char fd_file_tf[1024];
  55 
  55 
  56         // 변환한 파일명 저장 - class함수 전용
  57         char fd_file_tf_c[1024];
  58         fd_file_tf_c[0] = '\0'; // '\0'으로 초기화
  59 

  59         // Makefile 파일명 저장
  60         char makefile_name[1024];
  61 
  62         // 반복문 등에 사용되는 변수 i, j, k, m, 임시적으로 쓰이는 int형 변수 temp, char형 배열 buf_temp
  63         int i, j, k, m, temp;
  64         char buf_temp[1024];
  65 
  66         // 버퍼, 버퍼 사이즈, 토큰을 저장하는 배열, 토큰의 개수와 줄 개수 그리고 fgetc 함수의 반환값을 받는 정수
  67         char buffer[1024][1024];
  68         int buffer_size[1024];
  69         char token[1024][1024];
  70         int token_count = 0;
  71         int line_count = 0;
  72         int ch_num = 97; // 아스키 코드로 97은 a를 의미한다.
  73 
  74         // 변환할 코드의 변수의 type과 이름을 저장하는 배열
  75         char type_buf[1024][500];
  76 
  77         // 변환된 코드를 저장하는 배열과 그 줄 개수를 나타내는 정수 - main함수 전용
  78         char transfer_buf[1024][1024];
  79         int transfer_line = 0;
  80 
  81         // 변환된 코드를 저장하는 배열과 그 줄 개수를 나타내는 정수 - class함수 전용
  82         char transfer_buf_c[1024][1024];
  83         int transfer_line_c = 0;
  84 
  85         // 변환된 코드에서 사용되는 헤더를 저장하는 배열과 그 개수를 나타내는 정수 - main함수 전용
  86         char header_store[1024][1024];
  87         int header_count = 0;
  88 
  89         // 변환된 코드에서 사용되는 헤더를 저장하는 배열과 그 개수를 나타내는 정수 - class함수 전용
  90         char header_store_c[1024][1024];
  91         int header_count_c = 0;
  92 
  93         // 코드에서 사용되는 변수의 이름과 자료형을 보관하는 구조체 배열과 그 개수 - main함수 전용
  94         var_store variables[1024];
  95         int variables_count = 0;
  96 
  97         // 코드에서 사용되는 변수의 이름과 자료형을 보관하는 구조체 배열과 그 개수 - class함수 전용
  98         var_store variables_c[1024];
  99         int variables_count_c = 0;
 100 
 102         // main함수가 등장했는지 여부를 판별하는 변수 지정 (등장하면 1)
 103         int main_sw = 0;
 104 
 105         // class함수가 등장했는지 여부를 판별하는 변수 지정 (등장하면 1)
 106         int class_sw = 0;


 115         // main 부분 헤더 파일 개수
 116         int main_header_count = 0;
 117 
 118         // class 부분 헤더 파일 개수
 119         int class_header_count = 0;

  109         // main 부분 줄 개수
 110         int main_count = 0;
 111 
 112         // class 부분 줄 개수
 113         int class_count = 0;


 101         // class의 개수를 저장하는 변수, 만약 class가 1개이면 파일은 1개 생성되고, class가 2개이면 파일은 2개 생성됨
 102         int class_count = 0;
 103 

 111         // 코드에서 등장한 함수를 저장하는 배열과 그 개수를 나타내는 정수 (최대 100개까지 저장가능)
 112         char func_store[100][1024];
 113         int func_count = 0;

 104         // 예외 처리(IOException)를 하는지의 여부를 판단하는 스위치 변수
 105         int exception_sw = 0; // 1이면 예외처리를 수행
 106 
 107         // 프로그램의 실행 시간을 측정하고자 하는 변수
 108         struct timeval begin_t, end_t;
